/**
 * \brief Controller definitions.
 * 
 * \date 2021/08/09
 * 
 * \defgroup controller Controller
 * \ingroup src
 * \{
 */

#ifndef CONTROLLER_H_
#define CONTROLLER_H_

#include "udp_client.h"

#define ROOM_TEMP_SENSOR                     "sta0" /**< Sensor Ta: room temperature outside the boiler in degree celsius */
#define BOILER_WATER_TEMP_SENSOR             "st-0" /**< Sensor T: internal boiler water temperature in degree celsius */
#define INPUT_SUPPLY_WATER_TEMP_SENSOR       "sti0" /**< Sensor Ti: supply input cold water temperature in degree celsius */
#define OUTPUT_DEMAND_WATER_FLOW_SENSOR      "sno0" /**< Sensor No: output demand water flow in kg per second */
#define BOILER_WATER_HEIGHT_SENSOR           "sh-0" /**< Sensor H: water height inside the boiler tank */
#define INPUT_SUPPLY_WATER_FLOW_ACTUATOR     "ani"  /**< Actuator Ni: supply input cold water flow in kg per second */
#define INPUT_SUPPLY_HOT_WATER_FLOW_ACTUATOR "ana"  /**< Actuator Na: supply input hot water flow in kg per second */
#define INPUT_HEAT_FLOW_ACTUATOR             "aq-"  /**< Actuator Q: input heat generated by the heater in joules per second */
#define OUTPUT_DUMP_WATER_FLOW_ACTUATOR      "anf"  /**< Actuator Nf: output dump water flow in kg per second */

#define TEMP_SET_POINT      32
#define HEIGHT_SET_POINT    2

/**
 * \brief Controller type.
 */
typedef struct {
    char *manipulated_variable;     /**<  */
    char *process_variable;         /**<  */
    float overflow;                 /**<  */
    float underflow;                /**<  */
    float ku;                       /**<  */
    float pu;                       /**<  */
    float kp;                       /**<  */
    float ki;                       /**<  */
} controller_t;

/**
 * \brief 
 *
 * \param[]
 */
controller_t controller_init(char *manipulated_variable, char *process_variable, float overflow, float underflow, float ku, float pu);

/**
 * \brief 
 *
 * \param[]
 */
float pi_algorithm(controller_t *cont, float reference, float control_variable);

/**
 * \brief Get the sensor value.
 *
 * \param[in] sensor is the sensor to be read.
 */
float get_sensor(char *sensor);

/**
 * \brief Set the actuator value.
 *
 * \param[in] value is the new value of the actuator.
 * 
 * \param[in] actuator is the actuator to update.
 */
void set_actuator(float value, char *actuator);

#endif /* CONTROLLER_H_ */

/** \} End of controller group */


